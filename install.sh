#!/bin/bash

# i3wm Complete Setup Script
# Author: Pablo Sánchez
# Description: Installs and configures i3wm with all dependencies and dotfiles
# Disclaimer: this was generated by Claude.Ai, so don't sue me.

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if running as root
check_root() {
    if [[ $EUID -eq 0 ]]; then
        log_error "This script should not be run as root!"
        log_info "Run it as your regular user. It will ask for sudo when needed."
        exit 1
    fi
}

# Check if we're on Arch Linux
check_arch() {
    if ! command -v pacman &> /dev/null; then
        log_error "This script is designed for Arch Linux systems with pacman."
        exit 1
    fi
}

# Update system
update_system() {
    log_info "Updating system packages..."
    sudo pacman -Syu --noconfirm
    log_success "System updated"
}

# Install packages using pacman
install_packages() {
    log_info "Installing required packages..."
    
    local packages=(
        # Window manager and core
        "i3-wm"
        "i3status" 
        "i3lock"
        "dmenu"
        
        # Display and compositor
        "xorg-server"
        "xorg-xinit"
        "xorg-xrandr"
        "xorg-xsetroot"
        "picom"
        "feh"
        
        # Audio
        "pulseaudio"
        "pulseaudio-alsa"
        "pavucontrol"
        "alsa-utils"
        
        # Network and Bluetooth
        "networkmanager"
        "network-manager-applet"
        "bluez"
        "bluez-utils"
        "blueman"
        
        # Applications from config
        "kitty"
        "chromium"
        "nautilus"
        "code"
        "rofi"
        "flameshot"
        "redshift"
        
        # Utilities
        "brightnessctl"
        "xautolock"
        "dex"
        "git"
        "wget"
        "unzip"
        
        # Fonts
        "ttf-liberation"
        "ttf-dejavu"
        "noto-fonts"
    )
    
    for package in "${packages[@]}"; do
        if pacman -Qi "$package" &> /dev/null; then
            log_info "$package is already installed"
        else
            log_info "Installing $package..."
            sudo pacman -S --noconfirm "$package"
        fi
    done
    
    log_success "All packages installed"
}

# Install AUR helper (yay) if not present
install_aur_helper() {
    if ! command -v yay &> /dev/null; then
        log_info "Installing yay AUR helper..."
        cd /tmp
        git clone https://aur.archlinux.org/yay.git
        cd yay
        makepkg -si --noconfirm
        cd ~
        log_success "yay installed"
    else
        log_info "yay is already installed"
    fi
}

# Install AUR packages
install_aur_packages() {
    log_info "Installing AUR packages..."
    
    local aur_packages=(
        "i3lock-fancy"
    )
    
    for package in "${aur_packages[@]}"; do
        if yay -Qi "$package" &> /dev/null; then
            log_info "$package is already installed"
        else
            log_info "Installing $package from AUR..."
            yay -S --noconfirm "$package"
        fi
    done
    
    log_success "AUR packages installed"
}

# Create necessary directories
create_directories() {
    log_info "Creating configuration directories..."
    
    local directories=(
        "$HOME/.config/i3"
        "$HOME/.config/i3status" 
        "$HOME/.config/scripts"
        "$HOME/Pictures/Wallpapers"
        "$HOME/.config/rofi"
    )
    
    for dir in "${directories[@]}"; do
        if [[ ! -d "$dir" ]]; then
            mkdir -p "$dir"
            log_info "Created directory: $dir"
        fi
    done
    
    log_success "Directories created"
}

# Deploy configuration files
deploy_configs() {
    log_info "Deploying configuration files..."
    
    # Backup existing configs
    local timestamp=$(date +%Y%m%d_%H%M%S)
    local backup_dir="$HOME/.config/backup_$timestamp"
    
    if [[ -f "$HOME/.config/i3/config" ]] || [[ -f "$HOME/.config/i3status/i3status.conf" ]]; then
        log_warning "Existing configs found. Creating backup at $backup_dir"
        mkdir -p "$backup_dir"
        [[ -d "$HOME/.config/i3" ]] && cp -r "$HOME/.config/i3" "$backup_dir/"
        [[ -d "$HOME/.config/i3status" ]] && cp -r "$HOME/.config/i3status" "$backup_dir/"
        [[ -d "$HOME/.config/scripts" ]] && cp -r "$HOME/.config/scripts" "$backup_dir/"
    fi
    
    # Copy configuration files (assuming they're in the same directory as this script)
    local script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
    
    # Copy i3 config
    if [[ -f "$script_dir/i3/config" ]]; then
        cp "$script_dir/i3/config" "$HOME/.config/i3/config"
        log_success "i3 config deployed"
    else
        log_warning "i3/config not found in script directory"
    fi
    
    # Copy i3status config  
    if [[ -f "$script_dir/i3status/i3status.conf" ]]; then
        cp "$script_dir/i3status/i3status.conf" "$HOME/.config/i3status/i3status.conf"
        log_success "i3status config deployed"
    else
        log_warning "i3status/i3status.conf not found in script directory"
    fi
    
    # Copy scripts
    if [[ -d "$script_dir/scripts" ]]; then
        cp -r "$script_dir/scripts/"* "$HOME/.config/scripts/"
        chmod +x "$HOME/.config/scripts/"*.sh
        log_success "Scripts deployed and made executable"
    else
        log_warning "scripts directory not found in script directory"
    fi
    
    # Copy wallpapers
    if [[ -d "$script_dir/wallpapers" ]]; then
        cp -r "$script_dir/wallpapers/"* "$HOME/Pictures/Wallpapers/"
        log_success "Wallpapers deployed"
    else
        log_warning "wallpapers directory not found in script directory"
    fi
}

# Create essential scripts if they don't exist
create_essential_scripts() {
    log_info "Creating essential scripts..."
    
    # Create touchpad script
    cat > "$HOME/.config/scripts/touchpad.sh" << 'EOF'
#!/bin/bash
# Enable natural scrolling and tap-to-click for touchpads

# Find touchpad device
touchpad_id=$(xinput list | grep -i touchpad | head -1 | grep -o 'id=[0-9]*' | cut -d'=' -f2)

if [[ -n "$touchpad_id" ]]; then
    # Enable natural scrolling
    xinput set-prop "$touchpad_id" "libinput Natural Scrolling Enabled" 1
    # Enable tap to click
    xinput set-prop "$touchpad_id" "libinput Tapping Enabled" 1
    echo "Touchpad configured: ID $touchpad_id"
else
    echo "No touchpad found"
fi
EOF

    # Create power menu script
    cat > "$HOME/.config/scripts/powermenu.sh" << 'EOF'
#!/bin/bash
# Power menu using rofi

options="⏻ Shutdown\n⭮ Restart\n⏸ Suspend\n🔒 Lock\n⏴ Logout"

chosen=$(echo -e "$options" | rofi -dmenu -i -p "Power Menu")

case $chosen in
    "⏻ Shutdown")
        systemctl poweroff
        ;;
    "⭮ Restart")
        systemctl reboot
        ;;
    "⏸ Suspend")
        systemctl suspend
        ;;
    "🔒 Lock")
        i3lock-fancy
        ;;
    "⏴ Logout")
        i3-msg exit
        ;;
esac
EOF

    chmod +x "$HOME/.config/scripts/"*.sh
    log_success "Essential scripts created"
}

# Set up system services
setup_services() {
    log_info "Enabling system services..."
    
    # Enable NetworkManager
    sudo systemctl enable NetworkManager
    sudo systemctl start NetworkManager
    
    # Enable Bluetooth
    sudo systemctl enable bluetooth
    sudo systemctl start bluetooth
    
    log_success "System services enabled"
}

# Add user to necessary groups
setup_user_groups() {
    log_info "Adding user to necessary groups..."
    
    # Add to video group for brightness control
    sudo usermod -a -G video "$USER"
    
    # Add to audio group
    sudo usermod -a -G audio "$USER"
    
    log_success "User added to necessary groups"
}

# Create .xinitrc for starting i3
create_xinitrc() {
    log_info "Creating .xinitrc..."
    
    cat > "$HOME/.xinitrc" << 'EOF'
#!/bin/sh
# .xinitrc - X11 initialization script

# Merge in defaults and keymaps
if [ -f $HOME/.Xresources ]; then
    xrdb -merge $HOME/.Xresources
fi

if [ -f $HOME/.Xmodmap ]; then
    xmodmap $HOME/.Xmodmap
fi

# Start i3 window manager
exec i3
EOF

    chmod +x "$HOME/.xinitrc"
    log_success ".xinitrc created"
}

# Download some wallpapers if wallpapers directory is empty
download_wallpapers() {
    if [[ ! "$(ls -A "$HOME/Pictures/Wallpapers" 2>/dev/null)" ]]; then
        log_info "Downloading sample wallpapers..."
        cd "$HOME/Pictures/Wallpapers"
        
        # Download some free wallpapers (you can replace these URLs)
        wget -q "https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=1920&h=1080&fit=crop" -O "mountain1.jpg" || true
        wget -q "https://images.unsplash.com/photo-1441974231531-c6227db76b6e?w=1920&h=1080&fit=crop" -O "forest1.jpg" || true
        
        log_success "Sample wallpapers downloaded"
    else
        log_info "Wallpapers directory is not empty, skipping download"
    fi
}

# Main installation function
main() {
    log_info "Starting i3wm installation and configuration..."
    
    check_root
    check_arch
    
    log_info "This script will install and configure i3wm with all dependencies."
    read -p "Do you want to continue? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log_info "Installation cancelled."
        exit 0
    fi
    
    update_system
    install_packages
    install_aur_helper
    install_aur_packages
    create_directories
    deploy_configs
    create_essential_scripts
    setup_services
    setup_user_groups
    create_xinitrc
    download_wallpapers
    
    log_success "Installation completed successfully!"
    echo
    log_info "Next steps:"
    echo "1. Log out of your current session"
    echo "2. If using a display manager, select i3 as your session"
    echo "3. If using startx, run 'startx' to start i3"
    echo "4. You may need to reboot for group changes to take effect"
    echo
    log_info "Key bindings:"
    echo "- Super+Return: Terminal (kitty)"
    echo "- Super+Space: App launcher (rofi)"  
    echo "- Super+Ctrl+L: Lock screen"
    echo "- Super+Ctrl+P: Power menu"
    echo "- Super+Q: Kill window"
    echo
    log_warning "Remember to configure your display manager or use startx to start i3!"
}

# Run main function
main "$@"